package com.company;/* Analyzer.java */
/* Generated By:JavaCC: Do not edit this line. Analyzer.java */
/** ITIP Analyzer. */
public class Analyzer implements AnalyzerConstants {

    static double reverseSign(double d){
                return d*(-1);
        }

    static double coef(double sign, double a){
        return sign*a;
    }

    static final public void analyze(Expression expr) throws ParseException
    {
      double sign = 1;

      expression(sign,expr);

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LE:{
            jj_consume_token(LE);
            expr.setType(-1);
        break;
        }
        case GE:{
            jj_consume_token(GE);
            expr.setType(1);
        break;
        }
        case EQUAL:{
            jj_consume_token(EQUAL);
            expr.setType(0);
        break;
        }
        default:
            jj_la1[0] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
      }

      expression(reverseSign(sign),expr);
      jj_consume_token(0);
  }

  static final public void expression(double sign, Expression expr) throws ParseException
  {
        term(sign,expr);
        label_1:
        while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case PLUS:
                case MINUS:{
                    ;
                    break;
                }
                default:
                    jj_la1[1] = jj_gen;
                    break label_1;
            }

            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case PLUS:{
                    jj_consume_token(PLUS);
                    term(sign,expr);
                    break;
                }
                case MINUS:{
                    jj_consume_token(MINUS);
                    term(reverseSign(sign),expr);
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
  }

  static final public void term(double sign, Expression expr) throws ParseException
  {
      Token t = null;
      double value;

      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NUM:{
      t = jj_consume_token(NUM);
      break;
      }
      default:
      jj_la1[3] = jj_gen;
      }

      if(t==null)
          value=1;
      else
          value = Double.parseDouble(t.image);


    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ENTROPY:{
      entropy(coef(sign,value),expr);
      break;
      }
      case MUTUAL:{
      mutualinformation(coef(sign,value),expr);
      break;
      }
      default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void entropy(double coef, Expression expr) throws ParseException
  {
      int val1;
      int val2 = 0;
      jj_consume_token(ENTROPY);
      jj_consume_token(LPAR);
      val1 = varlist();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COND:{
      jj_consume_token(COND);
      val2 = varlist();
      break;
      }
      default:
      jj_la1[5] = jj_gen;
      }

      jj_consume_token(RPAR);

      if( val2 == 0 ){
          expr.addElement(val1,coef);
      }else{
          expr.addElement(val1+val2,coef);
          expr.addElement(val2,reverseSign(coef));
      }
  }

  static final public void mutualinformation(double coef, Expression expr) throws ParseException
  {
      int val1;
      int val2;
      int val3 = 0;
    jj_consume_token(MUTUAL);
    jj_consume_token(LPAR);
    val1 = varlist();
    jj_consume_token(SEMI);
    val2 = varlist();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COND:{
      jj_consume_token(COND);
      val3 = varlist();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPAR);

    if(val3 == 0){
        expr.addElement(val1,coef);
        expr.addElement(val2,coef);
        expr.addElement(val1+val2,reverseSign(coef));
    }else{
        expr.addElement(val1+val3,coef);
        expr.addElement(val2+val3,coef);
        expr.addElement(val3,reverseSign(coef));
        expr.addElement(val1+val2+val3,reverseSign(coef));
    }

  }

  static final public int varlist() throws ParseException
  {
      Token t;
      int rval = 0;
      Rvnames rv = new Rvnames();

      t = jj_consume_token(VAR);
      rval = rval + rv.exist(t.image);

      label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      t = jj_consume_token(VAR);

    rval = rval + rv.exist(t.image);
    }
{if ("" != null) return rval;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AnalyzerTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0xe00,0x180,0x180,0x2000,0x60,0x8000,0x8000,0x40000,};
   }

  /** Constructor with InputStream. */
  public Analyzer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Analyzer(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AnalyzerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Analyzer(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AnalyzerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Analyzer(AnalyzerTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(AnalyzerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();//jkhkjhjk
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
